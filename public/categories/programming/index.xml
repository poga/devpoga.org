<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Dev.Poga</title>
    <link>https://devpoga.org/categories/programming/</link>
    <description>Recent content in Programming on Dev.Poga</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://devpoga.org/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Running a Service in Production without Losing Your Sanity</title>
      <link>https://devpoga.org/post/2019-11-06-running-service-production/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://devpoga.org/post/2019-11-06-running-service-production/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Golden Age of New Programming Languages</title>
      <link>https://devpoga.org/post/2019-11-03-golden-age-of-programming-language/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://devpoga.org/post/2019-11-03-golden-age-of-programming-language/</guid>
      <description>&lt;p&gt;2020 is going to be the golden age of new programming languages.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Benchmarking VPS for Remote Rust Development Environment</title>
      <link>https://devpoga.org/post/2019-10-22-vps_rust_compile_benchmark/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://devpoga.org/post/2019-10-22-vps_rust_compile_benchmark/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://devpoga.org/post/2019-10-22-vps_rust_compile_benchmark/chart.png&#34;&gt;&lt;img src=&#34;https://devpoga.org/post/2019-10-22-vps_rust_compile_benchmark/chart.png&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ripgrep Cheat Sheet</title>
      <link>https://devpoga.org/post/2019-09-20_ripgrep_cheat_sheet/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://devpoga.org/post/2019-09-20_ripgrep_cheat_sheet/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Structured Concurrency</title>
      <link>https://devpoga.org/post/2019-06-30_structured_concurrency/</link>
      <pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://devpoga.org/post/2019-06-30_structured_concurrency/</guid>
      <description>&lt;p&gt;Thread 跟 Coroutine 是兩種常常用來處理 Concurrency 的工具。&lt;/p&gt;

&lt;p&gt;使用這兩個工具時，很麻煩的一點就是需要手動管理他們的生命週期。本質上，Thread 跟 Coroutine 都是 global scope，不管你如何建立，他們都獨立在原本的程式順序之外。&lt;/p&gt;

&lt;p&gt;常見的例子是，如果你在 main 建立一個新的 thread，main 並不會等 thread 結束，而需要你手動 join thread，在複雜的情況（例如 cancel、timeout）便相當容易出錯。&lt;/p&gt;

&lt;p&gt;而 Structured Concurrency 就是試圖將 Thread 的生命週期與大家都很熟悉的 scope 結合。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go，七年後</title>
      <link>https://devpoga.org/post/golang-7-years-later/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://devpoga.org/post/golang-7-years-later/</guid>
      <description>&lt;p&gt;從&lt;a href=&#34;https://blog.golang.org/go-version-1-is-released&#34;&gt;開始接觸 Go&lt;/a&gt; 到現在也已經過了 7 年了啊&amp;hellip; 最近又有機會拿出 Go 出來寫寫，隨手寫一下感受。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Notes on the Implementation of Lua 5.3</title>
      <link>https://devpoga.org/post/implementation-lua53/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://devpoga.org/post/implementation-lua53/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://poga.github.io/lua53-notes/&#34;&gt;Notes on the Implementation on Lua 5.3&lt;/a&gt; is a collection of my notes on the Lua 5.3 source code. It&amp;rsquo;s a mix of both high-level ideas and interesting details in the source code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Analyze Streaming Data with Rust, Actix, and Lua</title>
      <link>https://devpoga.org/post/parsing-streaming-data-actix-lua/</link>
      <pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://devpoga.org/post/parsing-streaming-data-actix-lua/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/poga/actix-lua&#34;&gt;&lt;code&gt;actix-lua&lt;/code&gt;&lt;/a&gt; provides a safe scripting environment for the &lt;a href=&#34;http://actix.rs&#34;&gt;actix&lt;/a&gt; framework with the &lt;a href=&#34;http://lua.org&#34;&gt;Lua Programming Language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example about what you can achieve with it. Hope you can try these ideas in your next project.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>