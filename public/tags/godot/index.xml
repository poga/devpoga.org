<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Godot on Dev.Poga</title>
    <link>https://devpoga.org/tags/godot/</link>
    <description>Recent content in Godot on Dev.Poga</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Jul 2022 00:00:00 +0800</lastBuildDate><atom:link href="https://devpoga.org/tags/godot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Developing Godot Projects with Neovim</title>
      <link>https://devpoga.org/blog/2022-07-23_neovim_godot/</link>
      <pubDate>Sat, 23 Jul 2022 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2022-07-23_neovim_godot/</guid>
      <description>When I started using Godot Engine, what surprised me the most is the built-in Language Server Protocol support. Thank to it, I can easily develop GDScript with all my customized vim configs.
Setup Install vim-godot.
Plug &amp;#39;habamax/vim-godot&amp;#39; Install neovim-remote.
pip3 install neovim-remote Setup Neovim as the external editor for Godot
Open menu Editor/Editor Settings/ then navigate to General/External/: Tick Use external editor Set nvr to Exec Path, use which nvr to get the absolute path.</description>
    </item>
    
    <item>
      <title>Unity, Godot, and Right to Repair</title>
      <link>https://devpoga.org/blog/2022-07-01_unity_godot_right_to_repair/</link>
      <pubDate>Fri, 01 Jul 2022 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2022-07-01_unity_godot_right_to_repair/</guid>
      <description>Some years ago, Unity dominated the game engine market. Everyone would recommend Unity to fellow game developers without thinking.
However, Unity (as a game engine) is not in a great shape right now:
Deprecating features while the replacement isn’t ready, Creating multiple new implementations of features from scratch instead of improving what’s there. Abandoning their own features in favour of acquiring community-made versions, and then abandoning them, Splitting the whole render system into two incompatible, contrary versions, deprecating the previous render system.</description>
    </item>
    
  </channel>
</rss>
