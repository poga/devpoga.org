<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kappa on Dev.Poga</title>
    <link>https://devpoga.org/tags/kappa/</link>
    <description>Recent content in Kappa on Dev.Poga</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Dec 2017 07:32:07 +0000</lastBuildDate>
    
	<atom:link href="https://devpoga.org/tags/kappa/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kappa Architecture：以資料為中心的系統架構</title>
      <link>https://devpoga.org/post/2017-12-22_kappa-architecture%E4%BB%A5%E8%B3%87%E6%96%99%E7%82%BA%E4%B8%AD%E5%BF%83%E7%9A%84%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B/</link>
      <pubDate>Fri, 22 Dec 2017 07:32:07 +0000</pubDate>
      
      <guid>https://devpoga.org/post/2017-12-22_kappa-architecture%E4%BB%A5%E8%B3%87%E6%96%99%E7%82%BA%E4%B8%AD%E5%BF%83%E7%9A%84%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B/</guid>
      <description>在開發軟體時，有許多眾所周知的架構模式（architecture pattern）可做為參考。例如最廣為人知的 MVC 架構。採用這些常用模式，能大幅減低溝通成本，各種 Framework 也能提高開發速度。
現在已經是個以資料為中心的環境，各種商業決策都依賴大量的資料。因此，系統必須能提供各種資料格式與查詢方式供各種需求使用。在這樣的環境中，也慢慢發展出許多特有的模式。
常見的狀況是，一個系統中不同的角色有著不同的需求。工程師希望能採用高效能，容易擴充的架構；業務部門希望能即時查到各種資訊；會計系統希望能收到批次處理的當月報表。這些不同的需求，都在不斷的拉扯一個系統的架構。
如果是較為單純的系統，所有資料都會存在單一資料庫中。常常，為了應付各種互相衝突的需求，資料的格式（schema）被不斷修改、欄位越來越多。最後各部門的需求互相糾結，整個系統陷入泥沼，開發速度大減。只使用單一資料庫又無法滿足各種需求，只好導入 ElasticSearch 做全文檢索與 Hadoop/Spark 進行大量資料處理，即時資料處理也需要與批次處理完全不同的架構。於是，整個系統益加複雜，難以維護。
遇到這種狀況，許多人都會將系統按照業務領域切開，切成一個一個的 microservices。每個 service 有著自己專用的資料儲存架構，便可解決共用資料庫的糾結狀況。
以電商系統為例，系統將會被拆成「訂單服務」、「客戶分析服務」、「帳務服務」等獨立的服務組成。服務之間只透過 API 來溝通，避免過度耦合。
不過，由於各個服務之間需要不斷的互相溝通與交換資料，每個服務對資料也有不同的查詢需求。隨著需求不斷變動，每個子服務所提供的 API 還是會變的越來越複雜。
各服務為了避免 API 的麻煩，會希望自己也有一份資料副本可隨意使用。一旦資料有了副本，就要處理許多資料同步的麻煩問題。
無論如何，這些狀況都只會讓系統再度糾結在一起，原本按領域切割好的服務實際上又合而為一。遇到這種情況時，通常代表服務的界線需要做調整。但調整服務界線從來就不是一件簡單的事。
假設有兩個部門都會對訂單進行各種分析。理想中，應該切出一個分析服務來服務這兩個部門。然而受限於組織架構（head count 分配、預算規劃、政治等），最後多半是兩個部門有各自的分析服務。因此大幅提高系統開發成本，產生許多重複的工作。
康威定律（Conway’s Law）便是描述這個現象：系統的架構就等於組織的架構。如果已有組織架構存在，那就很難設計出打破原先組織架構的系統架構。
於是，系統架構被組織架構所限制。無法劃分出正確的服務分界，便無法建立真正有彈性的系統架構
問題的本質：資料的流通性 實際上，這些問題其實只是同一問題的不同面向。也就是「資料在領域間轉換的複雜度」。
 不同業務領域需要的資料結構大不相同，所以單一資料庫提供的單一 schema 無法負荷。 團隊在有限資源下，難以應付不同領域的需求，導致無法設計容易維護與使用的 API。 讓資料在不同領域間流動的成本太高，所以資料出現大量、可能過時的副本。 領域間差異太大，導致部門間溝通困難，因此組織架構影響系統架構決策，與系統架構互相糾結、牽制。  而 Kappa 架構便是藉由回歸資料的本質來解決這些問題。
資料的本質：Append-only Log 任何資料都是由一連串的改變所形成，因此，每一筆資料都可以用一個 append-only log 表示。
假設目前有一筆用戶資料如下：
{ &amp;quot;user_id&amp;quot;: 1234, &amp;quot;username&amp;quot;: “Jack123”, &amp;quot;balance&amp;quot;: 75 }  這筆用戶資料其實是由一連串的事件修改所形成：
{ // 使用者註冊 &amp;quot;event&amp;quot;: &amp;quot;register&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;Jack123&amp;quot;, &amp;quot;user_id&amp;quot;: 1234, } { // 使用者儲值 &amp;quot;event&amp;quot;: &amp;quot;deposit&amp;quot;, &amp;quot;user_id&amp;quot;: 1234 &amp;quot;add_balance”: 100 } { // 使用者消費付款 &amp;quot;event&amp;quot;: &amp;quot;purchase&amp;quot;, &amp;quot;user_id&amp;quot;: 1234, &amp;quot;add_balance&amp;quot;: -25 }  因為已經發生的修改不會再變動，因此這是一份 append-only log。</description>
    </item>
    
  </channel>
</rss>