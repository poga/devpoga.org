<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>programming on Dev.Poga</title>
    <link>https://devpoga.org/tags/programming/</link>
    <description>Recent content in programming on Dev.Poga</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Feb 2023 00:00:00 +0800</lastBuildDate><atom:link href="https://devpoga.org/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hacking is a lost art</title>
      <link>https://devpoga.org/blog/2023-02-19_hacking_lost_art/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2023-02-19_hacking_lost_art/</guid>
      <description>What&amp;rsquo;s hacking?
It is the practice of aggressively refining the problem statement in order to identify find the problem that is actually worth solving.
It is the art of focusing on solving a problem in the most impactful and economical way possible while minimizing accidental complexity.
It is the art of not getting attached to a solution and iterating quickly.
It&amp;rsquo;s the art of having fun while doing it.</description>
    </item>
    
    <item>
      <title>Start with the Least Malleable</title>
      <link>https://devpoga.org/blog/2023-01-02_start_with_the_least_malleable/</link>
      <pubDate>Mon, 02 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2023-01-02_start_with_the_least_malleable/</guid>
      <description>Always start with the least malleable whenever you&amp;rsquo;re onboarding to a new job, switching careers, or just joining a new project.
Resources you&amp;rsquo;re going to encounter in your career, from least malleable to most malleable:
People Process Code Always start with the people. People are shaped by their life. It&amp;rsquo;s impossible to rapidly change a person without some crazy stuff happen.
Run if people make you feel uncomfortable. Since It&amp;rsquo;s not worthy to spend your life to change some other people just to have an okay career.</description>
    </item>
    
    <item>
      <title>Cheap Complexity and Cybersecurity</title>
      <link>https://devpoga.org/blog/2022-08-28_cheap_complexity_cybersecurity/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2022-08-28_cheap_complexity_cybersecurity/</guid>
      <description>A recurrent theme of modern security is the importance of complexity and the difficulty of containing it. With GPUs, NICs, basebands, and specialized hardware such as TPUs, things are objectively getting more complicated at a superlinear rate.
In a world where complexity continues to grow, it is hard to provide security guarantees. The problem of escalating complexity becomes an escalated security problem.
What&amp;rsquo;s driving the complexity? &amp;ldquo;How does one design an electric motor?</description>
    </item>
    
    <item>
      <title>gRPC status codes</title>
      <link>https://devpoga.org/blog/2022-01-03_grpc_status_code/</link>
      <pubDate>Mon, 03 Jan 2022 00:56:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2022-01-03_grpc_status_code/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://grpc.io&#34;&gt;gRPC&lt;/a&gt; defined &lt;a href=&#34;https://github.com/grpc/grpc/blob/0e00c430827e81d61e1e7164ef04ca21ccbfaa77/include/grpcpp/impl/codegen/status_code_enum.h&#34;&gt;18 status codes&lt;/a&gt; for returning different types of errors.&lt;/p&gt;
&lt;p&gt;I think they&amp;rsquo;re a pretty good reference if you want to design clear error handling for API.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pipelines and Glue Systems</title>
      <link>https://devpoga.org/blog/2021-12-25_pipelines_and_glue_systems/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2021-12-25_pipelines_and_glue_systems/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;: Machine Learning Projects are mainly just a complex interdependent pipeline. We desperately need a better abstraction for them.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On Building Glue Systems</title>
      <link>https://devpoga.org/blog/2021-09-18_on_glue_systems/</link>
      <pubDate>Sat, 18 Sep 2021 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2021-09-18_on_glue_systems/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://devpoga.org/post/2021-09-18_on_glue_systems/glue.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;I spent most of my life building glue systems.&lt;/p&gt;
&lt;p&gt;Sometimes, I got to work on a deep, sparkling project. But most of the time, my work is about gluing things together.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Learning Julia, Line by Line</title>
      <link>https://devpoga.org/blog/2021-08-04_learning_julia_line_by_line/</link>
      <pubDate>Wed, 04 Aug 2021 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2021-08-04_learning_julia_line_by_line/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/StefanKarpinski/Cards.jl&#34;&gt;Cardsjl&lt;/a&gt; is a simple Julia package which demonstrate many interesting bits of the &lt;a href=&#34;https://julialang.org/&#34;&gt;Julia Programming Language&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Reading it is an enjoyable experience. The note I&amp;rsquo;ve writtend down is here:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Haxe and Programming for Many Machines</title>
      <link>https://devpoga.org/blog/2021-05-11_haxe_and_programming_for_many_machines/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2021-05-11_haxe_and_programming_for_many_machines/</guid>
      <description>&lt;p&gt;The title sounds obvious. We always program for a machine! A program won&amp;rsquo;t run itself!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common Lisp Local Project Development with Quicklisp</title>
      <link>https://devpoga.org/blog/2021-05-01_common_lisp_quicklisp_local_project/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2021-05-01_common_lisp_quicklisp_local_project/</guid>
      <description>Probably the cleanest way to do it:
(pushnew (truename &amp;#34;/projects/app/&amp;#34;) ql:*local-project-directories* ) (ql:register-local-projects) (ql:quickload :app) From Use Quicklisp to load personal projects from arbitrary locations.
Alternatively, you can create a symlink in ~/quicklisp/local-projects/.</description>
    </item>
    
    <item>
      <title>The Common Lisp Condition System</title>
      <link>https://devpoga.org/blog/2021-04-25_common_lisp_condition_system/</link>
      <pubDate>Sun, 25 Apr 2021 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2021-04-25_common_lisp_condition_system/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://devpoga.org/post/2021-04-25_common_lisp_condition_system/book.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Predictable Performance of OCaml&#39;s Module System</title>
      <link>https://devpoga.org/blog/2020-12-19_ocaml_predictable_module_functor/</link>
      <pubDate>Sat, 19 Dec 2020 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2020-12-19_ocaml_predictable_module_functor/</guid>
      <description>&lt;img loading=&#34;lazy&#34; src=&#34;https://devpoga.org/post/2020-12-19_ocaml_predictable_module_functor/camel.jpg&#34; alt=&#34;&#34;  /&gt;
 OCaml&amp;rsquo;s &lt;a href=&#34;https://dev.realworldocaml.org/files-modules-and-programs.html&#34;&gt;module system&lt;/a&gt; can be a powerful tool for building generic code and structuring systems. Functors are functions from modules to modules and they serve an important role for the power of module system. However, I want to know if functors (and the module system) can be optimized away by the OCaml compiler.</description>
    </item>
    
    <item>
      <title>Going through the OCaml compiler pipeline (manually)</title>
      <link>https://devpoga.org/blog/2020-11-30-ocaml-compiler-pipeline/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2020-11-30-ocaml-compiler-pipeline/</guid>
      <description>Modern compilers usually composed by multiple stages: parsers, optimizers, linkers, and assemblers. Let&amp;rsquo;s go through it one by one to have a better understanding of the OCaml compiler.</description>
    </item>
    
    <item>
      <title>A Taste of OCaml&#39;s Predictable Performance</title>
      <link>https://devpoga.org/blog/2020-11-21-a-taste-of-ocaml-predictable-performance/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2020-11-21-a-taste-of-ocaml-predictable-performance/</guid>
      <description>&lt;img loading=&#34;lazy&#34; src=&#34;https://devpoga.org/post/2020-11-21-a-taste-of-ocaml-predictable-performance/colour-logo.png&#34; alt=&#34;&#34;  /&gt;
 &lt;a href=&#34;https://github.com/mirage/eqaf&#34;&gt;eqaf&lt;/a&gt;, a constant-time compare function implementation in &lt;a href=&#34;https://ocaml.org/&#34;&gt;OCaml&lt;/a&gt;, is a great case to demonstrate the &lt;a href=&#34;https://signalsandthreads.com/language-design/#0008401&#34;&gt;predictable performance of OCaml&amp;rsquo;s compiler&lt;/a&gt;. Why?</description>
    </item>
    
    <item>
      <title>在 iPad 上布置軟體開發環境</title>
      <link>https://devpoga.org/blog/2020-08-01_ipad_programming_environment/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2020-08-01_ipad_programming_environment/</guid>
      <description>&lt;p&gt;五月買了 &lt;a href=&#34;https://www.apple.com/tw/ipad-pro/&#34;&gt;iPad Pro&lt;/a&gt; 跟 &lt;a href=&#34;https://www.apple.com/tw/ipad-keyboards/&#34;&gt;巧控鍵盤&lt;/a&gt; 後，大部分的需求 iPad Pro 都能直接滿足，除了寫程式以外。摸索了一陣子之後總算找到順手又省錢的寫程式方式了，這篇簡單記錄一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Concurrency in Clojure, Racket, and Gerbil Scheme</title>
      <link>https://devpoga.org/blog/2020-06-07-concurrency-clojure-racket-gerbil/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2020-06-07-concurrency-clojure-racket-gerbil/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://devpoga.org/post/2020-06-07-concurrency-clojure-racket-gerbil/index.jpeg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Domain Modeling Made Functional</title>
      <link>https://devpoga.org/blog/2020-04-10_domain-modeling-made-functional/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2020-04-10_domain-modeling-made-functional/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://devpoga.org/post/2020-04-10_domain-modeling-made-functional/book.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;Notes on the book &lt;a href=&#34;https://www.amazon.com/Domain-Modeling-Made-Functional-Domain-Driven/dp/1680502549&#34;&gt;Domain Modeling Made Functional: Tackle Software Complexity with Domain-Driven Design and F#&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zero Trust Network</title>
      <link>https://devpoga.org/blog/2020-04-09_zero-trust-network/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2020-04-09_zero-trust-network/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://devpoga.org/post/2020-04-09_zero-trust-network/book.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;Notes on the book &lt;a href=&#34;https://www.amazon.com/Zero-Trust-Networks-Building-Untrusted/dp/1491962194&#34;&gt;Zero Trust Network&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OCaml Quickstart</title>
      <link>https://devpoga.org/blog/2020-03-17_ocaml_quickstart/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2020-03-17_ocaml_quickstart/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://devpoga.org/post/2020-03-17_ocaml_quickstart/vim.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ocaml.org/&#34;&gt;OCaml&lt;/a&gt; is a great language. However, the tooling for newbies is kinda confusing. Here&amp;rsquo;s a guide to setup a working OCaml development environment in &lt;a href=&#34;https://neovim.io/&#34;&gt;neovim&lt;/a&gt; on MacOS.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Guide to Serve Machine Learning Models in Production</title>
      <link>https://devpoga.org/blog/2020-02-17_checklist_deploy_machine_learning_model_production/</link>
      <pubDate>Mon, 17 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2020-02-17_checklist_deploy_machine_learning_model_production/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s a simple checklist for people who deploy machine learning models to production. Based on my personal experience.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Running a Service in Production without Losing Your Sanity</title>
      <link>https://devpoga.org/blog/2019-11-06-running-service-production/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2019-11-06-running-service-production/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Golden Age of New Programming Languages</title>
      <link>https://devpoga.org/blog/2019-11-03-golden-age-of-programming-language/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2019-11-03-golden-age-of-programming-language/</guid>
      <description>&lt;p&gt;2020 is going to be the golden age of new programming languages.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Benchmarking VPS for Remote Rust Development Environment</title>
      <link>https://devpoga.org/blog/2019-10-22-vps_rust_compile_benchmark/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2019-10-22-vps_rust_compile_benchmark/</guid>
      <description>&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ripgrep Cheat Sheet</title>
      <link>https://devpoga.org/blog/2019-09-20_ripgrep_cheat_sheet/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2019-09-20_ripgrep_cheat_sheet/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Structured Concurrency</title>
      <link>https://devpoga.org/blog/2019-06-30_structured_concurrency/</link>
      <pubDate>Sun, 30 Jun 2019 00:00:00 +0800</pubDate>
      
      <guid>https://devpoga.org/blog/2019-06-30_structured_concurrency/</guid>
      <description>&lt;p&gt;Thread 跟 Coroutine 是兩種常常用來處理 Concurrency 的工具。&lt;/p&gt;
&lt;p&gt;使用這兩個工具時，很麻煩的一點就是需要手動管理他們的生命週期。本質上，Thread 跟 Coroutine 都是 global scope，不管你如何建立，他們都獨立在原本的程式順序之外。&lt;/p&gt;
&lt;p&gt;常見的例子是，如果你在 main 建立一個新的 thread，main 並不會等 thread 結束，而需要你手動 join thread，在複雜的情況（例如 cancel、timeout）便相當容易出錯。&lt;/p&gt;
&lt;p&gt;而 Structured Concurrency 就是試圖將 Thread 的生命週期與大家都很熟悉的 scope 結合。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
