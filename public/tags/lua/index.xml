<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lua on Dev.Poga</title>
    <link>https://devpoga.org/tags/lua/</link>
    <description>Recent content in Lua on Dev.Poga</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://devpoga.org/tags/lua/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Notes on the Implementation of Lua 5.3</title>
      <link>https://devpoga.org/post/implementation-lua53/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://devpoga.org/post/implementation-lua53/</guid>
      <description>Notes on the Implementation on Lua 5.3 is a collection of my notes on the Lua 5.3 source code. It&amp;rsquo;s a mix of both high-level ideas and interesting details in the source code.
There can be errors. Feel free to contact me if you have any question or feedback.
Why Lua? In the world of embeddable scripting language, Lua is still the most well-known solution. It&amp;rsquo;s lightweight enough to run on mobile phones, IoT devices.</description>
    </item>
    
    <item>
      <title>Analyze Streaming Data with Rust, Actix, and Lua</title>
      <link>https://devpoga.org/post/parsing-streaming-data-actix-lua/</link>
      <pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://devpoga.org/post/parsing-streaming-data-actix-lua/</guid>
      <description>actix-lua provides a safe scripting environment for the actix framework with the Lua Programming Language.
Here&amp;rsquo;s an example about what you can achieve with it. Hope you can try these ideas in your next project.
Definitely not a world-changing project Path of Exile(PoE) is an online multiplayer RPG. In PoE, players get powerful, unique items by killing monsters. Then, they put their items to the market and trade with others.</description>
    </item>
    
    <item>
      <title>如何整合 Rust 與 Lua</title>
      <link>https://devpoga.org/post/2018-09-03_%E5%A6%82%E4%BD%95%E6%95%B4%E5%90%88-rust-%E8%88%87-lua/</link>
      <pubDate>Mon, 03 Sep 2018 23:30:04 +0000</pubDate>
      
      <guid>https://devpoga.org/post/2018-09-03_%E5%A6%82%E4%BD%95%E6%95%B4%E5%90%88-rust-%E8%88%87-lua/</guid>
      <description>Photo by Anders Jildén on Unsplash
在系統中遷入一個動態輕巧的 scripting language 一直是個常見的設計。像 Rust 這樣的系統語言，雖然效能好，但是上手門檻較高。這時若是能遷入一個像 Lua 一樣動態型別，簡單易懂的語言，便能大幅提高系統彈性。
最近為了實做 actix-lua，研究了一下 Rust 跟 Lua 之間的介接，順便學了不少 Rust 跟 Lua 的設計，筆記在此。
Lua Binding 的選擇 Rust 現在有數套 Lua binding，比較常被人提到的是 lua, hlua 與 rlua 。
lua 基本上是直接把 Lua 的 C API 直接移植，沒有做多餘的包裝。所以需要絕對的效能的話，這可能是你的最佳選擇。不過安全性跟 UB 就要自己處理了。
hlua 提供是比較高階的介面，不讓你直接存取 Lua Stack，可以視為 lua API 上的再一層包裝。彈性較低，可能不適合某些需求。
rlua 是由知名遊戲工作室 chucklefish 開發。延續 Rust 對安全性的要求，設計介面時也是以安全性為最高原則。在使用 rlua 的 API 時，不會產生任何 UB（由於 lua API 跟內部的運作方式，這種 API 真的很難做到…）也許犧牲了一點效能，不過對於 Rust 的使用者來說，這樣的 tradeoff 應該是蠻值得的。</description>
    </item>
    
  </channel>
</rss>